###     :::::::::::::::::::::: IMPORTANT INFORMATION :::::::::::::::::::::::::::::::    #
#
#    
#    Consult the following website (and the corresponding paper) for 
#    more detailed information about the individual parameters and 
#    their meanings:
#    
#    http://www.fhnw.ch/wirtschaft/iwi/gmt
#
#
#    Direct references on what is explained below are the following:
#
# [1] Riesen, Kaspar, Sandro Emmenegger, and Horst Bunke. "A novel software toolkit 
# for graph edit distance computation." International Workshop on Graph-Based 
# Representations in Pattern Recognition. Springer Berlin Heidelberg, 2013.
#
# [2] Neuhaus, Michel, Kaspar Riesen, and Horst Bunke. "Fast suboptimal algorithms 
# for the computation of graph edit distance." Joint IAPR International Workshops 
# on Statistical Techniques in Pattern Recognition (SPR) and Structural and 
# Syntactic Pattern Recognition (SSPR). Springer Berlin Heidelberg, 2006.
#
# [3] Fankhauser, Stefan, Kaspar Riesen, and Horst Bunke. "Speeding up graph edit 
# distance computation through fast bipartite matching." International Workshop 
# on Graph-Based Representations in Pattern Recognition. 
# Springer Berlin Heidelberg, 2011.
#
#
#
#
###     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::    #


#########################################################################################
#     INPUT / OUTPUT              #######################################################
#########################################################################################


#---------------------------------------------------------------------------------------#
#     source and target graph set described by a .xml file:                             #
#       |  <?xml version="1.0"?>                                                        #
#       |  <GraphCollection><graphs>                                                    #
#       |      <print file="AP1_0001.gxl" class="A"/>                                   #
#       |      ...                                                                      #
#       |      <print file="AP1_0051.gxl" class="A"/>                                   #
#       |  </graphs></GraphCollection>                                                  #
#     pathes to the graph folder (apparently it has to be the same for both source      #
#         and target)                                                                   #
#     filename of the .txt file that will contain the results                           #
#                                                                                       #
#     another possibility is to pass two graphs directly as arguments                   #
#        e.g. java -jar GMT.jar property.prop graph1.gxl graph2.gxl                     #
#     in this case you have to set singlePair=1, and you can omit source and targe      #
#---------------------------------------------------------------------------------------#
source=./data/Letter/small.xml
target=./data/Letter/small.xml
path=./data/Letter/
result=./result/letter.txt




#########################################################################################
#     ALGORITHM                   #######################################################
#########################################################################################


#---------------------------------------------------------------------------------------#
#     graph matching paradigm (possible choices are: AStar, Beam, Hungarian, VJ)        #
#     if "Beam" is chosen, maximum number of open paths s has to be defined (eg s=100)  #
#        AStar: [2] original and exact graph edit distance                              #
#        Beam: [2] greedy edition of AStar                                              #
#        Hungarian: [3] bipartite graph matching - accurate                             #
#        VJ: [3] bipartite graph matching - quick                                       #
# TODO: what is adj=best
#---------------------------------------------------------------------------------------#
matching=AStar
s=
adj=best


#---------------------------------------------------------------------------------------#
#     cost for node/edge deletions/insertions (both cost values have to be > 0)         #
#---------------------------------------------------------------------------------------#
node=1.0
edge=1.0


#---------------------------------------------------------------------------------------#
#     alpha weights the node and edge costs:                                            #
#         alpha * nodeCost; (1-alpha) * edgeCost                                        #
#---------------------------------------------------------------------------------------#
alpha=0.5




#########################################################################################
#     NODES COSTS                 #######################################################
#########################################################################################


#---------------------------------------------------------------------------------------#
#     number of node attributes and the individual names of these attributes            #
#---------------------------------------------------------------------------------------#
numOfNodeAttr=2
nodeAttr0=x
nodeAttr1=y


#---------------------------------------------------------------------------------------#
#     cost function type per individual node attribute. possible choices are:           #
#         squared,                                                                      #
#         absolute,                                                                     #
#         discrete,                                                                     #
#         sed,                                                                          #
#         csvDouble                                                                     #
#     if cost-function=discrete for node attribute i: nodeCostMui and nodeCostNui       # 
#         (non-negative real values) have to be additionally defined                    #
#---------------------------------------------------------------------------------------#
nodeCostType0=squared
nodeCostType1=squared


#---------------------------------------------------------------------------------------#
#     weighting parameters per individual node attribute                                #
#     (min=0, max=1.0; default = 1.0)                                                   #
#---------------------------------------------------------------------------------------#
nodeAttr0Importance=1.0
nodeAttr1Importance=1.0


#---------------------------------------------------------------------------------------#
#     individual node costs are added (multiplyNodeCosts=0) or                          #
#     multiplied (multiplyNodeCosts=1)                                                  #
#     p-th root is extracted from the combined node cost                                #
#---------------------------------------------------------------------------------------#
multiplyNodeCosts=0
pNode=2


#########################################################################################
#     EDGES COSTS                 #######################################################
#########################################################################################


#---------------------------------------------------------------------------------------#
#     edges are directed (=0) or undirected (=1)                                        #
#---------------------------------------------------------------------------------------#
undirected=1


#---------------------------------------------------------------------------------------#
#     number of edge attributes and the individual names of these attributes            #
#---------------------------------------------------------------------------------------#
numOfEdgeAttr=0


#---------------------------------------------------------------------------------------#
#     cost function type per individual edge attribute. See vertex cost options         #
#---------------------------------------------------------------------------------------#


#---------------------------------------------------------------------------------------#
#     weighting parameters per individual edge attribute                                #
#     (min=0, max=1.0; default = 1.0)                                                   #
#---------------------------------------------------------------------------------------#


#---------------------------------------------------------------------------------------#
#     individual edge costs are added (multiplyEdgeCosts=0) or                          #
#     multiplied (multiplyEdgeCosts=1)                                                  #
#     p-th root is extracted from the combined edge cost                                #
#---------------------------------------------------------------------------------------#
multiplyEdgeCosts=0
pEdge=1




#########################################################################################
#     OTHERS                      #######################################################
#########################################################################################

#---------------------------------------------------------------------------------------#
#     logging options on the console                                                    #
# TODO: what is this ?
#---------------------------------------------------------------------------------------#
outputGraphs=0
outputEditpath=0
outputCostMatrix=0
outputMatching=0


#---------------------------------------------------------------------------------------#
#     build similarities from distances or not (possible choices are 0,1,2,3,4)         #
# TODO: what is this ?
#---------------------------------------------------------------------------------------#
simKernel=0

